name: create release for latest tag

on:
  push:
    branches: [ develop ]
#   pull_request:
#     branches: [ develop ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  framework: 'WireSyncEngine'
#   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-10.15

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: oprypin/find-latest-tag@v1
        with:
          repository: billypchan/wire-ios-sync-engine
          releases-only: false  # We know that all relevant tags have a GitHub release for them.
        id: findtag  # The step ID to refer to later.

      - run: echo "This repo is at version ${{ steps.findtag.outputs.tag }}"
  
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          ref: ${{ steps.findtag.outputs.tag }}
      
#       - name: Download Carthage for cache-builds speed up
#         uses: actions/download-artifact@v2
#         continue-on-error: true
#         with:
#           name: carthage
#       - shell: bash
#         continue-on-error: true
#         run: |
#           unzip Carthage.zip
#           ls Carthage
#           rm Carthage.zip

      # Runs a set of commands using the runners shell
      - name: carthage
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          carthage bootstrap --use-xcframeworks --platform ios --cache-builds

      - name: zip carthage artifact for caching
        continue-on-error: true
        run: |
          ##ignore source code
          zip -r Carthage.zip Carthage -x Carthage/Checkouts

      - name: archive and create xcframework
        run: |
          xcodebuild archive -project ${{env.framework}}.xcodeproj -scheme ${{env.framework}} -configuration Release -destination 'generic/platform=iOS' -archivePath './${{env.framework}}.framework-iphoneos.xcarchive' SKIP_INSTALL=NO  BUILD_LIBRARY_FOR_DISTRIBUTION=YES
          xcodebuild archive -project ${{env.framework}}.xcodeproj -scheme ${{env.framework}} -configuration Release -destination 'generic/platform=iOS Simulator' -archivePath './${{env.framework}}.framework-iphonesimulator.xcarchive' SKIP_INSTALL=NO  BUILD_LIBRARY_FOR_DISTRIBUTION=YES
          
          xcodebuild -create-xcframework -framework '${{env.framework}}.framework-iphoneos.xcarchive/Products/Library/Frameworks/${{env.framework}}.framework' -framework './${{env.framework}}.framework-iphonesimulator.xcarchive/Products/Library/Frameworks/${{env.framework}}.framework' -output '${{env.framework}}.xcframework'          
      - name: zip xcframework
        run: |
          zip -r ${{env.framework}}.xcframework.zip "${{env.framework}}.xcframework"
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.findtag.outputs.tag }}
          files: |
            ${{env.framework}}.xcframework.zip

      - name: Upload build artifact of carthage
        uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: carthage
          path: Carthage.zip
